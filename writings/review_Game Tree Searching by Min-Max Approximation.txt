This paper presents an extension of iterative searching algorithm. It aims at improving the choice of child node to explore during searching. The technique it uses is based on an apporximation of the min-max function. This extension is implemented in the game called connect-four and tested against minimax algorithms with alpha-beta pruning and iterative deepening. The result shows that when CPU circles are the limiting factor, this extensior is inferior than the minimax but if the number o calls to "move" routine is the limiting factor, this method outperforms minimax.
  
The key idea in this extension to make a better choice of node-to-explore is based on dereivatives. The algorithm tries to find the tip node ("leaf" nodes in a partial game tree that are not terminal nodes so that the nodes can be expanded for next step.) with the largest impact on root's nodes score. To achieve this, the min/max function normally used to choose a tip node need to be replaced by an approximated function that has continueous derivatives (a function that look "smooth"). The authors chooses generalized p-mean function with larger than 10 p value.  
    
The algorithms needs to get the impact of a tip node relative to the root node so that the chain rule of derivatives are used to calculate the derivatives of the score of a tip node to the scores of root. To reduce parameters and same memory, the algorithm actually breakdownt he derivatives by edges and stores parameters in each parent and child nodes. Those parameters can be used to find the any derivatives along a path from the root to any tip node or between two nodes with ancestor-descendent relationship.  
  
Other detials of the algoriothm includes but not limits to use the min/max function instead of generalized p-mean function when calculating the actual value of derivatives and choose some constant parameters for the calculation.  
  
The tests are conducted on the same game and same hardware for all possible starting configurations so that the experiements are comprehensive. Besides confirming the effectiveness (in the move-bound situation) of this algorithm, the experiements aloo shows future discussions such as how to aimprove the effeciency when there is only one valid choice for a tip node, to spend less time traveling up-and-down on the same paths and choice of better parameters in either derivative calculation and the evaluation function.